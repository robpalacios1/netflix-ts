[{"C:\\Users\\robpa\\OneDrive\\Escritorio\\project\\netflix-ts\\src\\index.tsx":"1","C:\\Users\\robpa\\OneDrive\\Escritorio\\project\\netflix-ts\\src\\reportWebVitals.ts":"2","C:\\Users\\robpa\\OneDrive\\Escritorio\\project\\netflix-ts\\src\\App.tsx":"3","C:\\Users\\robpa\\OneDrive\\Escritorio\\project\\netflix-ts\\src\\config.ts":"4","C:\\Users\\robpa\\OneDrive\\Escritorio\\project\\netflix-ts\\src\\axios.ts":"5","C:\\Users\\robpa\\OneDrive\\Escritorio\\project\\netflix-ts\\src\\components\\Banner\\Banner.tsx":"6","C:\\Users\\robpa\\OneDrive\\Escritorio\\project\\netflix-ts\\src\\components\\NavBar\\NavBar.tsx":"7","C:\\Users\\robpa\\OneDrive\\Escritorio\\project\\netflix-ts\\src\\components\\Row\\Row.js":"8"},{"size":500,"mtime":1607529732884,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":1607529732884,"results":"11","hashOfConfig":"10"},{"size":1161,"mtime":1607551034479,"results":"12","hashOfConfig":"10"},{"size":1189,"mtime":1607545271899,"results":"13","hashOfConfig":"10"},{"size":155,"mtime":1607532820756,"results":"14","hashOfConfig":"10"},{"size":1861,"mtime":1607550463977,"results":"15","hashOfConfig":"10"},{"size":1014,"mtime":1607553829896,"results":"16","hashOfConfig":"10"},{"size":2414,"mtime":1607556989376,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1wt6cus",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},"C:\\Users\\robpa\\OneDrive\\Escritorio\\project\\netflix-ts\\src\\index.tsx",[],["38","39"],"C:\\Users\\robpa\\OneDrive\\Escritorio\\project\\netflix-ts\\src\\reportWebVitals.ts",[],"C:\\Users\\robpa\\OneDrive\\Escritorio\\project\\netflix-ts\\src\\App.tsx",[],"C:\\Users\\robpa\\OneDrive\\Escritorio\\project\\netflix-ts\\src\\config.ts",[],"C:\\Users\\robpa\\OneDrive\\Escritorio\\project\\netflix-ts\\src\\axios.ts",[],["40","41"],"C:\\Users\\robpa\\OneDrive\\Escritorio\\project\\netflix-ts\\src\\components\\Banner\\Banner.tsx",[],"C:\\Users\\robpa\\OneDrive\\Escritorio\\project\\netflix-ts\\src\\components\\NavBar\\NavBar.tsx",[],"C:\\Users\\robpa\\OneDrive\\Escritorio\\project\\netflix-ts\\src\\components\\Row\\Row.js",["42"],"import React, {useEffect, useState} from 'react'\r\nimport instance_netflix from '../../axios';\r\nimport YouTube from 'react-youtube';\r\nimport axios from 'axios';\r\nimport movieTrailer from 'movie-trailer';\r\n\r\nimport './Row.css';\r\n\r\n// export interface RowProps {\r\n//       title: string;\r\n//       url: string;\r\n//       isLarge: boolean;\r\n// }\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original\"\r\n\r\n// const Row : React.FC<RowProps> = (props) => {\r\n\r\n    const Row  = (props) => {\r\n    const {url, isLarge} = props;\r\n   \r\n    // const [movies, setMovies] = useState<any[]>([]);\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n    useEffect(() => { //fetching data can be donde in redux\r\n        const fetchData = async () => {\r\n            const request =  await instance_netflix.get(url);\r\n            //setMovies(request).. data.results\r\n            //original_name, genre_ids, name, popularity, origin_country\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [url]);\r\n    const opts = {\r\n        height: \"390\",\r\n        width: \"99%\",\r\n        playerVars: {\r\n        autoplay: 0,\r\n        }\r\n    }\r\n    const movieHandler = (movie) => {\r\n        if(trailerUrl){\r\n            setTrailerUrl(\"\");\r\n        } else {\r\n            movieTrailer(movie?.title || \"\")\r\n            .then(url => {\r\n              const Params = new URLSearchParams(new URL(url).search);\r\n              setTrailerUrl(Params.get('v'));\r\n            }).catch((error) => console.log(error));        \r\n\r\n        }\r\n    }\r\n\r\n    //make request\r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{props.title}</h2>\r\n\r\n            <div className=\"row__posters\">\r\n                {\r\n                    movies.map((movie) => {\r\n                        \r\n                        return <img \r\n                        key={movie.id}\r\n                        onClick={()=> movieHandler(movie)}\r\n                        className={`row__poster ${isLarge && \"row__posterLarge\"}`}\r\n                        src={`${base_url}${isLarge ? movie.poster_path : movie.backdrop_path}`}\r\n                        alt={movie.title}></img>\r\n                    })\r\n                }\r\n            </div>\r\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Row ;\r\n",["43","44"],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"45","replacedBy":"49"},{"ruleId":"47","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":4,"column":8,"nodeType":"53","messageId":"54","endLine":4,"endColumn":13},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],["55"],["56"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]